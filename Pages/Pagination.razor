@page "/pagination"

@using System.Net.Http

@inject HttpClient client

@using Newtonsoft.Json
@using Data

<div class="container-fluid">
    <style>
        tr:nth-child(even) {background-color:#cbeff7}

        th {
            background-color: #28b7ee;
        }
        h1 {
            color: #0d277c;
        }
    </style>
    <div class="row justify-content-center" style="margin-bottom:50px">
        <h1 class="text-center">All Store Apps - Paginate Results</h1>
    </div>

    <div class="row" style="margin:25px;">


        @if (StoreApps == null)
        {
            <p><em>No Records to Show.</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                        <th>Rating</th>
                        <th>People</th>
                        <th>Category</th>
                        <th>Date</th>
                        <th>Price</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var storeapp in StoreApps)
                    {
                        if (@StoreApps.IndexOf(storeapp) >= firstCountOfPage && StoreApps.IndexOf(storeapp) < lastCountOfPage)
                        {

                            <tr class="justify-content-center">
                                <td>@storeapp.Id</td>
                                <td>@storeapp.Name</td>
                                <td>@storeapp.Rating</td>
                                <td>@storeapp.People</td>
                                <td>@storeapp.Category</td>
                                <td>@storeapp.Date</td>
                                <td>@storeapp.Price</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
        <div class="justify-content-center">
        </div>
    </div>
</div>
<button class="btn btn-primary" @onclick="PreviousCount">Previous</button> &nbsp; <button class="btn btn-primary" @onclick="NextCount">Next</button>


@code {

    string responseBody = "";
    List<StoreApp> StoreApps = new List<StoreApp>();

    //Get Store Apps to show on page
    protected override async Task OnInitializedAsync()
    {
        var apiName = "api/StoreApps";
        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            responseBody = await httpResponse.Content.ReadAsStringAsync();
            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);
            StateHasChanged();

        }
    }

    //public int TotalPages()
    //{
    //    int totalPages = StoreApps.Count / appsPerPage;
    //    return totalPages;
    //}
    
    //length or count variable

    //variables for Paginate functions
    private int firstCountOfPage = 0;
    private int lastCountOfPage = 10;
    private int addToCount = 10;
    private int pageNumber = 0;
    private int totPages = 0;
    public string alert = "";

    //Move to next set of records
    private void NextCount()
    {
        totPages = 4;
        if (pageNumber <= totPages)
        {
            firstCountOfPage += addToCount;
            lastCountOfPage += addToCount;
            pageNumber++;
        }
    }

    //Move to previous set of records
    private void PreviousCount()
    {
        if (firstCountOfPage >= addToCount)
        {
            firstCountOfPage -= addToCount;
            lastCountOfPage -= addToCount;
        }
    }

}
