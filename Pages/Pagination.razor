@page "/pagination"

@using System.Net.Http

@inject HttpClient client

@using Newtonsoft.Json
@using Data

<div class="container-fluid">
    @*Styling the design of the page and table- adding personalised colour scheme*@
    <style>
        tr:nth-child(even) 
        {
            background-color: #cbeff7

        }

        th 
        {
            background-color: #28b7ee;
        }

        h1 
        {
            color: #0d277c;
        }
    </style>

    @*Make text centralised and add title of page*@
    <div class="row justify-content-center" style="margin-bottom:50px">
        <h1 class="text-center">All Store Apps - Paginate Results</h1>
    </div>

    @*Adding Next and Previous buttons to page*@
    <button class="btn btn-primary" @onclick="PreviousCount">Previous</button> &nbsp; <button class="btn btn-primary" @onclick="NextCount">Next</button>

    <div class="row" style="margin:25px;">

        @*If statement to bring in and show data from StoreApps*@
        @if (StoreApps == null)
        {
            <p><em>No Records to Show.</em></p>
        }
        else
        {
            @*Table created to show to have columns with headings
              Id, Name, Rating, People, Category, Date and Price*@
            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                        <th>Rating</th>
                        <th>People</th>
                        <th>Category</th>
                        <th>Date</th>
                        <th>Price</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var storeapp in StoreApps)
                    {
                        @*If Statement to show how to display app data*@
                        if (@StoreApps.IndexOf(storeapp) >= pageStart && StoreApps.IndexOf(storeapp) < pageEnd)
                        {
                            @*Bring in StoreApps data to display in the table*@
                            <tr class="justify-content-center">
                                <td>@storeapp.Id</td>
                                <td>@storeapp.Name</td>
                                <td>@storeapp.Rating</td>
                                <td>@storeapp.People</td>
                                <td>@storeapp.Category</td>
                                <td>@storeapp.Date</td>
                                <td>@storeapp.Price</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
        <div class="justify-content-center">
        </div>
    </div>
</div>


@code {
    //Code to create a list of all Data in the StoreApps
    string responseBody = "";
    List<StoreApp> StoreApps = new List<StoreApp>();

    //Get Store Apps to show on page
    protected override async Task OnInitializedAsync()
    {
        var apiName = "api/StoreApps"; //bring code from the API from source api/StoreApps this will bring all the Store App data in to the front end
        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            responseBody = await httpResponse.Content.ReadAsStringAsync();
            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);
            StateHasChanged();

        }
    }

    
    //variables for Paginate functions
    private int pageStart = 0;//start of page will display ID=0 initially
    private int pageEnd = 25; //ensure 25 items will display on the page
    private int pageSize = 25; //size of page will insure 25 is added to the next page 


    //Move to next set of records - add 25 to the whole page
    private void NextCount()
    {
        if (pageEnd <= StoreApps.Count) //if statement will ensure you can go no further than the last page
        {
            pageStart += pageSize;
            pageEnd += pageSize;
        }
    }

    //Move to previous set of records - minus 25 from the whole page
    private void PreviousCount()
    {
        if (pageStart >= pageSize) //if statement will ensure you can go no further back than the first page
        {
            pageStart -= pageSize;
            pageEnd -= pageSize;
        }
    }

}
