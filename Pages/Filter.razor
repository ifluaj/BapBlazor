@page "/filter"

@using System.Net.Http

@inject HttpClient client

@using Newtonsoft.Json
@using Data

<div class="container-fluid">
    <style>
        tr:nth-child(even) {
            background-color: #cbeff7
        }



        th {
            background-color: #28b7ee;
        }

        h1 {
            color: #0d277c;
        }
    </style>
    <div class="row justify-content-center" style="margin-bottom:50px">
        <h1 class="text-center">Store Apps - Filter results</h1>
    </div>



    <div class="row" style="margin:25px;">
        @if (StoreApps != null)
        {
            <table class="table">
                <thead class="thead">
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                        <th>
                            Rating
                            <form>
                                <select name="dropdown" @onchange="@DisplayRatingResult">
                                    <option value=”Select”>Select</option>
                                    <option value=”5”>5</option>
                                    <option value=”4.5”>4.5</option>
                                    <option value=”4”>4</option>
                                    <option value=”3.5”>3.5</option>
                                    <option value=”3”>3</option>
                                    <option value=”2.5”>2.5</option>
                                    <option value=”2”>2</option>
                                    <option value=”1.5”>1.5</option>
                                    <option value=”1”>1</option>
                                    <option value=”1.5”>0.5</option>
                                    <option value=”0”>0</option>
                                </select>
                            </form>
                        </th>
                        <th>People</th>
                        <th>
                            Category
                            <form>
                                <select name="dropdown" @onchange="@DisplayCategoryResult">
                                    <option value=”Select”>Select</option>
                                    <option value=”Books”>Books</option>
                                    <option value=”Business”>Business</option>
                                    <option value=”DeveloperTools”>Developer Tools</option>
                                    <option value=”Food&Dining”>Food And Dining</option>
                                    <option value=”Government&Politics”>Government And Politics</option>
                                    <option value=”Health&Fitness”>Health And Fitness</option>
                                    <option value=”Kids&Family”>Kids And Family</option>
                                    <option value=”Lifestyle”>Lifestyle</option>
                                    <option value=”MultimediaDesign”>Multimedia Design</option>
                                    <option value=”Music”>Music</option>
                                    <option value=”Navigation&Maps”>Navigation And Maps</option>
                                    <option value=”News&Weather”>News And Weather</option>
                                    <option value=”Social”>Social</option>
                                </select>
                            </form>
                        </th>
                        <th>Date</th>
                        <th>
                            Price
                            <form>
                                <select name="dropdown" @onchange="@DisplayPriceResult">
                                    <option value=”Select”>Select</option>
                                    <option value=”Free”>Free</option>
                                    <option value=”Paid”>Paid</option>
                                </select>
                            </form>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var storeapp in StoreAppsFiltered)
                    {
                        <tr class="justify-content-center">
                            <td>@storeapp.Id</td>
                            <td>@storeapp.Name</td>
                            <td>@storeapp.Rating</td>
                            <td>@storeapp.People</td>
                            <td>@storeapp.Category</td>
                            <td>@storeapp.Date</td>
                            <td>@storeapp.Price</td>



                        </tr>
                    }
                </tbody>
            </table>
        }
        @if (!StoreApps.Any())
        {
            <div class="justify-content-center">
                <h5>No records to show</h5>
            </div>
        }
    </div>



</div>

@code {
    string test;

    string responseBody = "";
    List<StoreApp> StoreApps = new List<StoreApp>();
    List<StoreApp> StoreAppsFiltered = new List<StoreApp>();
    string mainVariable;

    protected override async Task OnInitializedAsync()
    {
        var apiName = "api/StoreApps/";
        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            responseBody = await httpResponse.Content.ReadAsStringAsync();
            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);
            StateHasChanged();
        }

    }

    //Method to take in Rating selection as parameter, convert it to string, trunctuate unrecognised characters before and after words and use if statement to populate store apps filtered list with appropriate elements
    public void DisplayRatingResult(ChangeEventArgs value)
    {
        test = (string)value.Value;
        string newval = test.Substring(1, test.Length - 2);
        test = newval;
        StoreAppsFiltered.Clear();

        foreach (var storeapp in StoreApps)
        {
            if (storeapp.Rating == test)
            {
                StoreAppsFiltered.Add(storeapp);
            }
        }
    }

    //Method to take in Category selection as parameter, convert it to string with the appropriate spacing, trunctuate unrecognised characters before and after words and use if statement to populate store apps filtered list with appropriate elements
    public void DisplayCategoryResult(ChangeEventArgs value)
    {
        test = (string)value.Value;
        string newval = test.Substring(1, test.Length - 2);
        test = newval;
        StoreAppsFiltered.Clear();
        if (test == "DeveloperTools")
        {
            test = "Developer Tools";
        }
        else if (test == "Food&Dining")
        {
            test = "Food and Dining";
        }
        else if (test == "Government&Politics")
        {
            test = "Government and Politics";
        }
        else if (test == "Health&Fitness")
        {
            test = "Health and Fitness";
        }
        else if (test == "Kids&Family")
        {
            test = "Kids and Family";
        }
        else if (test == "MultimediaDesign")
        {
            test = "Multimedia Design";
        }
        else if (test == "Navigation&Maps")
        {
            test = "Navigation and Maps";
        }
        else if (test == "News&Weather")
        {
            test = "News and Weather";
        }

        foreach (var storeapp in StoreApps)
        {
            if (storeapp.Category == test)
            {
                StoreAppsFiltered.Add(storeapp);
            }
        }
    }
    //Method to take Price option selection as parameter, convert to string, trunctuate unrecognised characters before and after words and run a switch statement to populate appropriate elements into store apps filtered List
    public void DisplayPriceResult(ChangeEventArgs value)
    {
        StoreAppsFiltered.Clear();
        test = (string)value.Value;
        string newval = test.Substring(1, test.Length - 2);
        test = newval;


        foreach (var storeapp in StoreApps)
        {
            switch (test)
            {
                case "Free":
                    if(storeapp.Price=="Free")
                        StoreAppsFiltered.Add(storeapp);
                    break;
                case "Paid":
                    if(storeapp.Price!="Free")
                        StoreAppsFiltered.Add(storeapp);
                    break;
            }
        }
    }
}

