@page "/sort"
@using System.Net.Http

@inject HttpClient client

@using Newtonsoft.Json
@using Data

<div class="container-fluid">

    <div class="row justify-content-center" style="margin-bottom:50px">
        <h3 class="text-center">Store Apps - Sorted by Value</h3>
    </div>

    <div class="row" style="margin:25px;">

        @if (StoreApps != null)
        {
            <table class="table table-bordered table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>
                            <a href="javascript://" @onclick="@SortTableByIdAsc">Id Ascending ||</a>
                            <a href="javascript://" @onclick="@SortTableByIdDesc">Id Descending</a>
                        </th>
                        <th>
                            <a href="javascript://" @onclick="@SortTableByNameAsc">Name Ascending || </a>
                            <a href="javascript://" @onclick="@SortTableByNameDesc">Name Descending</a>
                        </th>
                        <th>
                            <a href="javascript://" @onclick="@SortTableByRatingAsc">Rating Ascending || </a>
                            <a href="javascript://" @onclick="@SortTableByRatingDesc">Rating Descending</a>
                        </th>
                        <th>
                            <a href="javascript://" @onclick="@SortTableByPeopleAsc">People Ascending || </a>
                            <a href="javascript://" @onclick="@SortTableByPeopleDesc">People Descending</a>
                        </th>
                        <th>
                            <a href="javascript://" @onclick="@SortTableByCategoryAsc">Category Ascending || </a>
                            <a href="javascript://" @onclick="@SortTableByCategoryDesc">Category Descending</a>
                        </th>
                        <th>
                            <a href="javascript://" @onclick="@SortTableByDateAsc">Date Ascending ||</a>
                            <a href="javascript://" @onclick="@SortTableByDateDesc">Date Descending</a>
                        </th>
                        <th>
                            <a href="javascript://" @onclick="@SortTableByPriceAsc">Price Ascending ||</a>
                            <a href="javascript://" @onclick="@SortTableByPriceDesc">Price Descending</a>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var storeapp in StoreApps)
                    {
                        <tr class="justify-content-center">
                            <td>@storeapp.Id</td>
                            <td>@storeapp.Name</td>
                            <td>@storeapp.Rating</td>
                            <td>@storeapp.People</td>
                            <td>@storeapp.Category</td>
                            <td>@storeapp.Date</td>
                            <td>@storeapp.Price</td>

                        </tr>
                    }
                </tbody>
            </table>
        }
        @if (!StoreApps.Any())
        {
            <div class="justify-content-center">
                <h5>No records to show</h5>
            </div>
        }
    </div>

</div>

@code {

    string responseBody = "";
    List<StoreApp> StoreApps = new List<StoreApp>();



    protected override async Task OnInitializedAsync()
    {
        var apiName = "api/StoreApps";
        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            responseBody = await httpResponse.Content.ReadAsStringAsync();
            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);
            StateHasChanged();
        }

    }

    public void SortTableByIdAsc()
    {

        StoreApps.Sort((x, y) => x.Id.CompareTo(y.Id));
    }
    public void SortTableByIdDesc()
    {

        StoreApps.Sort((x, y) => y.Id.CompareTo(x.Id));

    }
    public void SortTableByNameAsc()
    {
        StoreApps.Sort((x, y) => x.Name.CompareTo(y.Name));

    }
    public void SortTableByNameDesc()
    {

        StoreApps.Sort((x, y) => y.Name.CompareTo(x.Name));
    }
    public void SortTableByRatingAsc()
    {
        StoreApps.Sort((x, y) => x.Rating.CompareTo(y.Rating));

    }
    public void SortTableByRatingDesc()
    {

        StoreApps.Sort((x, y) => y.Rating.CompareTo(x.Rating));
    }
    public void SortTableByPeopleAsc()
    {
        StoreApps.Sort((x, y) => x.People.CompareTo(y.People));

    }
    public void SortTableByPeopleDesc()
    {

        StoreApps.Sort((x, y) => y.People.CompareTo(x.People));
    }
    public void SortTableByCategoryAsc()
    {
        StoreApps.Sort((x, y) => x.Category.CompareTo(y.Category));

    }
    public void SortTableByCategoryDesc()
    {

        StoreApps.Sort((x, y) => y.Category.CompareTo(x.Category));
    }
    public void SortTableByDateAsc()
    {
        StoreApps.Sort((x, y) => x.Date.CompareTo(y.Date));

    }
    public void SortTableByDateDesc()
    {

        StoreApps.Sort((x, y) => y.Date.CompareTo(x.Date));
    }
    public void SortTableByPriceAsc()
    {
        StoreApps.Sort((x, y) => x.Price.CompareTo(y.Price));

    }
    public void SortTableByPriceDesc()
    {

        StoreApps.Sort((x, y) => y.Price.CompareTo(x.Price));
    }

}