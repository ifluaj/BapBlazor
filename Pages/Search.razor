@page "/search"
@using System.Net.Http

@inject HttpClient client

@using Newtonsoft.Json
@using Data

@using Microsoft.Extensions.Logging
@inject ILogger<Search> Logger

<h1>Search</h1>

<p>This component demonstrates searching the datasaset.</p>

<p>One way to tackle this problem;</p>
<ul>
    <li>Start with pretty much the same code as FetchStoreApps.razor.</li>
    <li>Add a form to the page e.g. an input and a submit button.</li>
    <li>Create a new search model and method.</li>
    <li>When looping over StoreApps use IndexOf to test your search term.</li>
    <li><a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/forms-validation?view=aspnetcore-5.0">Blazor Forms</a></li>
</ul>

@*To do:
    expand from 10 recrods to full db
    *allow search from partial words
    *remove case sensitive
    add searching/spinner advisory
    *return more than just name/no
    *remove test line showing submutted text on blazor
    *clear previous searches function
    restore validation for searches

*@

@********************************************the magic is happening below this*************************************@

@*

    @*Reference table only - DO NOT DISTURB!!*@
@*<div class="container-fluid">

    <div class="row justify-content-center" style="margin-bottom:50px">
        <h3 class="text-center">Store Apps - First Ten Records</h3>
    </div>

    <div class="row" style="margin:25px;">
        @if (StoreApps != null)
        {
            <table class="table table-bordered table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var storeapp in StoreApps)
                    {
                        <tr class="justify-content-center">
                            <td>@storeapp.Id</td>
                            <td>@storeapp.Name</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        @if (!StoreApps.Any())
        {
            <div class="justify-content-center">
                <h5>No records to show</h5>
            </div>
        }
    </div>

</div>
    *@
@*LIVE table to display search results //updated for more info *@

<div class="container-fluid">

    <div class="row justify-content-center" style="margin-bottom:50px">
        <h3 class="text-center">Store Apps - Search Results</h3>
    </div>

    <div class="row" style="margin:25px;">
        @if (StoreApps != null)
        {
            <table class="table table-bordered table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                        <th>Rating</th>
                        <th>People</th>
                        <th>Category</th>
                        <th>Date</th>
                        <th>Price</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var storeapp in StoreAppsResult)
                    {
                        <tr class="justify-content-center">
                            <td>@storeapp.Id</td>
                            <td>@storeapp.Name</td>
                            <td>@storeapp.Rating</td>
                            <td>@storeapp.People</td>
                            <td>@storeapp.Category</td>
                            <td>@storeapp.Date</td>
                            <td>@storeapp.Price</td>
                        </tr>

                    }
                </tbody>
            </table>
        }
        @if (!StoreApps.Any())
        {
            <div class="justify-content-center">
                <h5>No records to show</h5>
            </div>
        }
    </div>


</div>



@*input box and button*@
@*
    <EditForm Model="@searchModel" OnValidSubmit="@SubmittedName">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText id="name" @bind-Value="searchModel.Name" />

        <button type="submit">Submit</button>
    </EditForm>
*@







@*test input box and button//testing oninput bind-event//clear search result added*@

<EditForm Model="@searchModel" OnValidSubmit="@SubmittedName">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="name" @bind-Value="searchModel.Name" />

    <button type="submit">Submit</button>
    @*<button type="reset">Clear Search</button>*@

</EditForm>

<EditForm Model="@searchModel" OnValidSubmit="@SearchClear">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @*<InputText id="name" @bind-Value="searchModel.Name" />*@

    <button type="submit">Clear Search Results</button>

</EditForm>
    
@code{
    void SearchClear()
    {

        //DisplaySearch(string.Empty);
        StoreAppsResult.Clear();

        //StoreApps.Clear();
        // StoreApps.Clear();


        /*foreach (var storeApp in StoreApps)
         {
             storeApp.Name = null;
             StoreAppsResult.Clear();

         }*/



        // searchModel.Name = String.Empty;
        //MySearch = String.Empty;

    }
}




@*MySearch variable test display on blazer*@
@*@MySearch*@



@code {
    public SearchModel searchModel = new();//changed to public

    string MySearch = "";



    public void SubmittedName()



    {
        //Logger.LogInformation("HandleValidSubmit called");
        Logger.LogInformation(searchModel.Name);

        MySearch = searchModel.Name;
        DisplaySearch(MySearch);
        // Process the valid form
    }


    string responseBody = "";
    List<StoreApp> StoreApps = new List<StoreApp>();
    List<StoreApp> StoreAppsResult = new List<StoreApp>();


    protected override async Task OnInitializedAsync()
    {
        var apiName = "api/StoreApps/FirstTen";
        var httpResponse = await client.GetAsync(apiName);
        //var results = apiName.(MySearch);
        //var searchResult = apiName.IndexOf(MySearch);

        if (httpResponse.IsSuccessStatusCode)
        {
            responseBody = await httpResponse.Content.ReadAsStringAsync();
            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);
            StateHasChanged();
        }

    }

    @*Search method//Added ToLower = not cap sensitive//Added Contains = Partial complete ok*@

    public void DisplaySearch(string MyWord)
    {

        foreach (var storeApp in StoreApps)
        {
            if (storeApp.Name.ToLower().Contains(MyWord.ToLower()))
            {
                StoreAppsResult.Add(storeApp);
            }
        }
    }

}




