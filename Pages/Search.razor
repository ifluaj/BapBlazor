@page "/search"
@using System.Net.Http

@inject HttpClient client

@using Newtonsoft.Json
@using Data

@using Microsoft.Extensions.Logging
@inject ILogger<Search> Logger

<h1>Search</h1>

<p>This component demonstrates searching the datasaset.</p>

@*LIVE table to display search results //updated for more columns *@

<div class="container-fluid">

    <div class="row justify-content-center" style="margin-bottom:50px">
        <h3 class="text-center">Store Apps - Search Results</h3>
    </div>

    <div class="row" style="margin:25px;">
        @if (StoreApps != null)
        {
            <table class="table table-bordered table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                        <th>Rating</th>
                        <th>People</th>
                        <th>Category</th>
                        <th>Date</th>
                        <th>Price</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var storeapp in StoreAppsResult)
                    {
                        <tr class="justify-content-center">
                            <td>@storeapp.Id</td>
                            <td>@storeapp.Name</td>
                            <td>@storeapp.Rating</td>
                            <td>@storeapp.People</td>
                            <td>@storeapp.Category</td>
                            <td>@storeapp.Date</td>
                            <td>@storeapp.Price</td>
                        </tr>

                    }
                </tbody>
            </table>
        }
        @if (!StoreApps.Any())
        {
            <div class="justify-content-center">
                <h5>No records to show</h5>
            </div>
        }
    </div>
    <div>
        <h1>@insufficient</h1>
    </div>

</div>


@*input box and button//testing oninput bind-event//clear search result added*@

<EditForm Model="@searchModel" OnValidSubmit="@SubmittedName">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="name" @bind-Value="searchModel.Name" />

    <button type="submit">Submit</button>
  </EditForm>

@*Clear Searh results button*@

<EditForm Model="@searchModel" OnValidSubmit="@SearchClear">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <button type="submit">Clear Search Results</button>
</EditForm>

@*Clear seach function added//clear insuficient warning added on clear*@    
@code{
    void SearchClear()
    {
        if(MySearch != null )
            StoreAppsResult.Clear();
            insufficient = "";

    }
}

@*MySearch variable test display on blazer*@
@*@MySearch*@

@*Connecting submit button to search results//added validation*@

@code {
    public SearchModel searchModel = new();

    string MySearch = "";
    string insufficient = "";

    public void SubmittedName()
    {

        Logger.LogInformation(searchModel.Name);

        MySearch = searchModel.Name;
        if (MySearch != null && MySearch.Length >= 3)//validate 3 char and prevent empty search exception
        {
            DisplaySearch(MySearch);
            insufficient ="";//reset insufficient warning
        }
        else
        {
            insufficient = "Please enter 3 or more characters to Search!";
        }
    }

    @*Building list from api*@
    string responseBody = "";
    List<StoreApp> StoreApps = new List<StoreApp>();
    List<StoreApp> StoreAppsResult = new List<StoreApp>();


    protected override async Task OnInitializedAsync()
    {
        var apiName = "api/StoreApps";
        var httpResponse = await client.GetAsync(apiName);
       
        if (httpResponse.IsSuccessStatusCode)
        {
            responseBody = await httpResponse.Content.ReadAsStringAsync();
            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);
            StateHasChanged();
        }

    }

    @*DisplaySearch method add results to new list//Added ToLower = not cap sensitive//Added Contains = Partial complete ok*@

    public void DisplaySearch(string MyWord)
    {

        foreach (var storeApp in StoreApps)
        {
            if (storeApp.Name.ToLower().Contains(MyWord.ToLower()))
            {
                StoreAppsResult.Add(storeApp);
            }
        }
    }

}




